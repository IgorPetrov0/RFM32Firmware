
RFM_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000606  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  0000067a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000931  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070b  00000000  00000000  000010a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000536  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00001cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d6  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a3  00000000  00000000  0000246e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_17>
  48:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 01 03 	jmp	0x602	; 0x602 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	SPDR=regAddress;
}
//////////////////////////////////////////////////////////////////////////
void setRegister(unsigned char regAddress, unsigned char data){
	
}
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	0e 94 5c 00 	call	0xb8	; 0xb8 <initGPIO>
  9c:	0e 94 7f 00 	call	0xfe	; 0xfe <initSPI>
  a0:	0e 94 a2 00 	call	0x144	; 0x144 <initUART>
  a4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <initTimers>
  a8:	78 94       	sei
  aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dataReady>
  ae:	88 23       	and	r24, r24
  b0:	e1 f3       	breq	.-8      	; 0xaa <main+0x1a>
  b2:	0e 94 a6 02 	call	0x54c	; 0x54c <transmitUART>
  b6:	f9 cf       	rjmp	.-14     	; 0xaa <main+0x1a>

000000b8 <initGPIO>:
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	87 e2       	ldi	r24, 0x27	; 39
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	27 e2       	ldi	r18, 0x27	; 39
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	21 60       	ori	r18, 0x01	; 1
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
  d2:	88 e2       	ldi	r24, 0x28	; 40
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	28 e2       	ldi	r18, 0x28	; 40
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	2e 7f       	andi	r18, 0xFE	; 254
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
  e4:	85 e2       	ldi	r24, 0x25	; 37
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	25 e2       	ldi	r18, 0x25	; 37
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	20 81       	ld	r18, Z
  f0:	24 60       	ori	r18, 0x04	; 4
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
  f6:	00 00       	nop
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <initSPI>:
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	8c e4       	ldi	r24, 0x4C	; 76
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	2c e4       	ldi	r18, 0x4C	; 76
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	20 81       	ld	r18, Z
 112:	20 64       	ori	r18, 0x40	; 64
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
 118:	8c e4       	ldi	r24, 0x4C	; 76
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	2c e4       	ldi	r18, 0x4C	; 76
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	20 68       	ori	r18, 0x80	; 128
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	8c e4       	ldi	r24, 0x4C	; 76
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	2c e4       	ldi	r18, 0x4C	; 76
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	20 61       	ori	r18, 0x10	; 16
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
 13c:	00 00       	nop
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <initUART>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	84 ec       	ldi	r24, 0xC4	; 196
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	27 e6       	ldi	r18, 0x67	; 103
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	85 ec       	ldi	r24, 0xC5	; 197
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	10 82       	st	Z, r1
 15e:	81 ec       	ldi	r24, 0xC1	; 193
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	21 ec       	ldi	r18, 0xC1	; 193
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	20 61       	ori	r18, 0x10	; 16
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
 170:	81 ec       	ldi	r24, 0xC1	; 193
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	21 ec       	ldi	r18, 0xC1	; 193
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	20 81       	ld	r18, Z
 17c:	20 68       	ori	r18, 0x80	; 128
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18
 182:	81 ec       	ldi	r24, 0xC1	; 193
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	21 ec       	ldi	r18, 0xC1	; 193
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	20 81       	ld	r18, Z
 18e:	20 64       	ori	r18, 0x40	; 64
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	82 ec       	ldi	r24, 0xC2	; 194
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	22 ec       	ldi	r18, 0xC2	; 194
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	f9 01       	movw	r30, r18
 19e:	20 81       	ld	r18, Z
 1a0:	26 60       	ori	r18, 0x06	; 6
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
 1a6:	00 00       	nop
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <initTimers>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	8f e6       	ldi	r24, 0x6F	; 111
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	2f e6       	ldi	r18, 0x6F	; 111
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	20 81       	ld	r18, Z
 1c2:	21 60       	ori	r18, 0x01	; 1
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
 1c8:	84 e8       	ldi	r24, 0x84	; 132
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	11 82       	std	Z+1, r1	; 0x01
 1d0:	10 82       	st	Z, r1
 1d2:	81 e8       	ldi	r24, 0x81	; 129
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	21 e8       	ldi	r18, 0x81	; 129
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	20 81       	ld	r18, Z
 1de:	25 60       	ori	r18, 0x05	; 5
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
 1e4:	00 00       	nop
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <__vector_18>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	84 e8       	ldi	r24, 0x84	; 132
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	4f 97       	sbiw	r24, 0x1f	; 31
 224:	10 f0       	brcs	.+4      	; 0x22a <__vector_18+0x3e>
 226:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USARTCounter>
 22a:	84 e8       	ldi	r24, 0x84	; 132
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	11 82       	std	Z+1, r1	; 0x01
 232:	10 82       	st	Z, r1
 234:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USARTCounter>
 238:	88 2f       	mov	r24, r24
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	26 ec       	ldi	r18, 0xC6	; 198
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	80 50       	subi	r24, 0x00	; 0
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USARTCounter>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USARTCounter>
 256:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 25a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USARTCounter>
 25e:	98 17       	cp	r25, r24
 260:	29 f4       	brne	.+10     	; 0x26c <__vector_18+0x80>
 262:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USARTCounter>
 266:	0e 94 90 01 	call	0x320	; 0x320 <decodePacket>
 26a:	06 c0       	rjmp	.+12     	; 0x278 <__vector_18+0x8c>
 26c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USARTCounter>
 270:	8a 30       	cpi	r24, 0x0A	; 10
 272:	10 f0       	brcs	.+4      	; 0x278 <__vector_18+0x8c>
 274:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USARTCounter>
 278:	00 00       	nop
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_20>:
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <transmitArray>
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <bytesCounter>
 2ce:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <bytesCounter+0x1>
 2d2:	28 17       	cp	r18, r24
 2d4:	39 07       	cpc	r19, r25
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <__vector_20+0x3e>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <dataReady>
 2de:	12 c0       	rjmp	.+36     	; 0x304 <__vector_20+0x62>
 2e0:	81 ec       	ldi	r24, 0xC1	; 193
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	21 ec       	ldi	r18, 0xC1	; 193
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	f9 01       	movw	r30, r18
 2ea:	20 81       	ld	r18, Z
 2ec:	27 7f       	andi	r18, 0xF7	; 247
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
 2f2:	81 ec       	ldi	r24, 0xC1	; 193
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	21 ec       	ldi	r18, 0xC1	; 193
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	f9 01       	movw	r30, r18
 2fc:	20 81       	ld	r18, Z
 2fe:	20 61       	ori	r18, 0x10	; 16
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <decodePacket>:
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 d0       	rcall	.+0      	; 0x326 <decodePacket+0x6>
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	bc 01       	movw	r22, r24
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 3a 02 	call	0x474	; 0x474 <CRC16>
 342:	8a 83       	std	Y+2, r24	; 0x02
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 2f       	mov	r24, r24
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	80 50       	subi	r24, 0x00	; 0
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	fc 01       	movw	r30, r24
 352:	90 81       	ld	r25, Z
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	98 17       	cp	r25, r24
 358:	c9 f4       	brne	.+50     	; 0x38c <decodePacket+0x6c>
 35a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	91 05       	cpc	r25, r1
 366:	19 f0       	breq	.+6      	; 0x36e <decodePacket+0x4e>
 368:	02 97       	sbiw	r24, 0x02	; 2
 36a:	91 f0       	breq	.+36     	; 0x390 <decodePacket+0x70>
 36c:	12 c0       	rjmp	.+36     	; 0x392 <decodePacket+0x72>
 36e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 372:	88 2f       	mov	r24, r24
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <currentCommand+0x1>
 37a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <currentCommand>
 37e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 382:	88 2f       	mov	r24, r24
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 8f 02 	call	0x51e	; 0x51e <getRegister>
 38a:	03 c0       	rjmp	.+6      	; 0x392 <decodePacket+0x72>
 38c:	00 00       	nop
 38e:	01 c0       	rjmp	.+2      	; 0x392 <decodePacket+0x72>
 390:	00 00       	nop
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <__vector_13>:
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USARTCounter>
 3b4:	00 00       	nop
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	0f 90       	pop	r0
 3bc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_17>:
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	88 e2       	ldi	r24, 0x28	; 40
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	28 e2       	ldi	r18, 0x28	; 40
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	f9 01       	movw	r30, r18
 3fc:	20 81       	ld	r18, Z
 3fe:	21 60       	ori	r18, 0x01	; 1
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
 404:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currentCommand>
 408:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currentCommand+0x1>
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	91 05       	cpc	r25, r1
 410:	31 f0       	breq	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	91 05       	cpc	r25, r1
 416:	c1 f0       	breq	.+48     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 418:	89 2b       	or	r24, r25
 41a:	51 f0       	breq	.+20     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41c:	16 c0       	rjmp	.+44     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 41e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <currentCommand+0x1>
 422:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <currentCommand>
 426:	8e e4       	ldi	r24, 0x4E	; 78
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	10 82       	st	Z, r1
 42e:	0d c0       	rjmp	.+26     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <dataReady>
 436:	8e e4       	ldi	r24, 0x4E	; 78
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	80 81       	ld	r24, Z
 43e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SPIIncomingBuffer>
 442:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <preparePacket>
 446:	01 c0       	rjmp	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	00 00       	nop
 44a:	00 00       	nop
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	bf 91       	pop	r27
 456:	af 91       	pop	r26
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	7f 91       	pop	r23
 45e:	6f 91       	pop	r22
 460:	5f 91       	pop	r21
 462:	4f 91       	pop	r20
 464:	3f 91       	pop	r19
 466:	2f 91       	pop	r18
 468:	0f 90       	pop	r0
 46a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <CRC16>:
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	27 97       	sbiw	r28, 0x07	; 7
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	9d 83       	std	Y+5, r25	; 0x05
 48a:	8c 83       	std	Y+4, r24	; 0x04
 48c:	7f 83       	std	Y+7, r23	; 0x07
 48e:	6e 83       	std	Y+6, r22	; 0x06
 490:	8f ef       	ldi	r24, 0xFF	; 255
 492:	9f ef       	ldi	r25, 0xFF	; 255
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	2f c0       	rjmp	.+94     	; 0x4f8 <CRC16+0x84>
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	9d 81       	ldd	r25, Y+5	; 0x05
 49e:	9c 01       	movw	r18, r24
 4a0:	2f 5f       	subi	r18, 0xFF	; 255
 4a2:	3f 4f       	sbci	r19, 0xFF	; 255
 4a4:	3d 83       	std	Y+5, r19	; 0x05
 4a6:	2c 83       	std	Y+4, r18	; 0x04
 4a8:	fc 01       	movw	r30, r24
 4aa:	80 81       	ld	r24, Z
 4ac:	88 2f       	mov	r24, r24
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	98 2f       	mov	r25, r24
 4b2:	88 27       	eor	r24, r24
 4b4:	9c 01       	movw	r18, r24
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ba:	82 27       	eor	r24, r18
 4bc:	93 27       	eor	r25, r19
 4be:	9a 83       	std	Y+2, r25	; 0x02
 4c0:	89 83       	std	Y+1, r24	; 0x01
 4c2:	1b 82       	std	Y+3, r1	; 0x03
 4c4:	16 c0       	rjmp	.+44     	; 0x4f2 <CRC16+0x7e>
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ca:	99 23       	and	r25, r25
 4cc:	4c f4       	brge	.+18     	; 0x4e0 <CRC16+0x6c>
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	9a 81       	ldd	r25, Y+2	; 0x02
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	f1 e2       	ldi	r31, 0x21	; 33
 4d8:	8f 27       	eor	r24, r31
 4da:	f0 e1       	ldi	r31, 0x10	; 16
 4dc:	9f 27       	eor	r25, r31
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <CRC16+0x74>
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	9a 81       	ldd	r25, Y+2	; 0x02
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	9a 83       	std	Y+2, r25	; 0x02
 4ea:	89 83       	std	Y+1, r24	; 0x01
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	8b 83       	std	Y+3, r24	; 0x03
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	88 30       	cpi	r24, 0x08	; 8
 4f6:	38 f3       	brcs	.-50     	; 0x4c6 <CRC16+0x52>
 4f8:	8e 81       	ldd	r24, Y+6	; 0x06
 4fa:	9f 81       	ldd	r25, Y+7	; 0x07
 4fc:	9c 01       	movw	r18, r24
 4fe:	21 50       	subi	r18, 0x01	; 1
 500:	31 09       	sbc	r19, r1
 502:	3f 83       	std	Y+7, r19	; 0x07
 504:	2e 83       	std	Y+6, r18	; 0x06
 506:	89 2b       	or	r24, r25
 508:	41 f6       	brne	.-112    	; 0x49a <CRC16+0x26>
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	27 96       	adiw	r28, 0x07	; 7
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <getRegister>:
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	00 d0       	rcall	.+0      	; 0x524 <getRegister+0x6>
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	9a 83       	std	Y+2, r25	; 0x02
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	9a 81       	ldd	r25, Y+2	; 0x02
 530:	8f 77       	andi	r24, 0x7F	; 127
 532:	9a 83       	std	Y+2, r25	; 0x02
 534:	89 83       	std	Y+1, r24	; 0x01
 536:	8e e4       	ldi	r24, 0x4E	; 78
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	29 81       	ldd	r18, Y+1	; 0x01
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
 540:	00 00       	nop
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <transmitUART>:
/////////////////////////////////////////////////////////////////////////
void transmitUART(){
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
	while ( !( UCSR0A & (1<<UDRE0)) );
 554:	00 00       	nop
 556:	80 ec       	ldi	r24, 0xC0	; 192
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	fc 01       	movw	r30, r24
 55c:	80 81       	ld	r24, Z
 55e:	88 2f       	mov	r24, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	80 72       	andi	r24, 0x20	; 32
 564:	99 27       	eor	r25, r25
 566:	89 2b       	or	r24, r25
 568:	b1 f3       	breq	.-20     	; 0x556 <transmitUART+0xa>
	UCSR0B&=(~(1<<RXEN0));//запрет на прием
 56a:	81 ec       	ldi	r24, 0xC1	; 193
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	21 ec       	ldi	r18, 0xC1	; 193
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	f9 01       	movw	r30, r18
 574:	20 81       	ld	r18, Z
 576:	2f 7e       	andi	r18, 0xEF	; 239
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18
	UCSR0B|=(1<<TXEN0);//разрешение передачи
 57c:	81 ec       	ldi	r24, 0xC1	; 193
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	21 ec       	ldi	r18, 0xC1	; 193
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	f9 01       	movw	r30, r18
 586:	20 81       	ld	r18, Z
 588:	28 60       	ori	r18, 0x08	; 8
 58a:	fc 01       	movw	r30, r24
 58c:	20 83       	st	Z, r18
	UDR0=transmitArray[bytesCounter];
 58e:	86 ec       	ldi	r24, 0xC6	; 198
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <bytesCounter>
 596:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <bytesCounter+0x1>
 59a:	2d 5f       	subi	r18, 0xFD	; 253
 59c:	3e 4f       	sbci	r19, 0xFE	; 254
 59e:	f9 01       	movw	r30, r18
 5a0:	20 81       	ld	r18, Z
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 83       	st	Z, r18
	bytesCounter++;
 5a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <bytesCounter>
 5aa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <bytesCounter+0x1>
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <bytesCounter+0x1>
 5b4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <bytesCounter>
	dataReady=0;
 5b8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dataReady>
}
 5bc:	00 00       	nop
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <preparePacket>:
/////////////////////////////////////////////////////////////////////////////
void preparePacket(){
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	1f 92       	push	r1
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
	transmitArray[0]=3;
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <transmitArray>
	transmitArray[1]=SPIIncomingBuffer;
 5d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <SPIIncomingBuffer>
 5d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <transmitArray+0x1>
	unsigned char crc=CRC16(transmitArray,2);
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	83 e0       	ldi	r24, 0x03	; 3
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 3a 02 	call	0x474	; 0x474 <CRC16>
 5e8:	89 83       	std	Y+1, r24	; 0x01
	transmitArray[2]=crc;
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <transmitArray+0x2>
	bytesCounter=0;
 5f0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <bytesCounter+0x1>
 5f4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <bytesCounter>
 5f8:	00 00       	nop
 5fa:	0f 90       	pop	r0
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
